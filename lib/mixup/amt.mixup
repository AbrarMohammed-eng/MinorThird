provide 'amt';

//-----------------------------------------------------------------------------
//A pertial code, that suffices for webMaster but otherwise should be enhanced.
//-Einat, feb4
//-----------------------------------------------------------------------------


defDict amtWord = $, dollar, USD, dollars, cent, cents, %, percent, percents, M, million, millions, K, thousands, billion, billions;

defTokenProp 3dig:1  =: ... [',' re('^[0-9]{3}$')] ... ;  		// e.g. ,000

defTokenProp amt:maybe =: ... [re('^[0-9]+$')] ... ;
defTokenProp amt:main =: ... [re('^[0-9]{1,3}$') 3dig:1+R] ... ; 	// e.g. 25,000
defTokenProp amt:dec =: ... amt:1 '.' [ re('^[0-9]+$') ] ... ; 	// e.g. xx.500
defTokenProp amt:exp =: ... [ai(amtWord)] amt:1 ... || ... amt:1 [ai(amtWord)] ... ;

defTokenProp amt:1 =: ... [amt:main amt:dec? amt:exp?] ... || ... [amt:exp? amt:main amt:dec?] ... ;
defTokenProp amt:1 =: ... [amt:maybe amt:dec? amt:exp] ... || ... [amt:exp amt:maybe amt:dec?] ... ; // add: if can't be date or time then it's amount for sure

// Extract adjacent amts separately

defSpanType amt =: ... [amt:main amt:dec? amt:exp?] ... || ... [amt:exp? amt:main amt:dec?] ... ;
defSpanType amt =: ... [amt:maybe amt:dec? amt:exp] ... || ... [amt:exp amt:maybe amt:dec?] ... ; // add: if can't be date or time then it's amount for sure


defDict midWord = or, -, and;
defDict btwWord = between, btw, bw, bt;
defDict qttyWord = $, dollar, USD, dollars, cent, cents, %, percent, percents, M, million, millions, K, thousands, billion, billions;







