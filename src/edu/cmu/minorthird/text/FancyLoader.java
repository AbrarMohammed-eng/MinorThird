package edu.cmu.minorthird.text;import edu.cmu.minorthird.text.gui.TextBaseViewer;import edu.cmu.minorthird.text.learn.AnnotatorLearner;import edu.cmu.minorthird.text.learn.*;
import edu.cmu.minorthird.text.*;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.util.*;import org.apache.log4j.*;/** * Configurable method of loading data objects. * To use this, put data.properties on the classpath, * and use it to define wcohen.scriptdir and wcohen.datadir. * Then FancyLoader.loadFoo("bar") will look in scriptdir * for a script named bar, execute it with dataDir bound to * the data directory, and return the result as an object of type 'Foo'. * * @author William Cohen*/public class FancyLoader{	private static Logger log = Logger.getLogger(FancyLoader.class);	/** Property defining root of repository */	public static final String REPOSITORY_PROP = "edu.cmu.minorthird.repository";	/** Property defining location of raw data */	public static final String DATADIR_PROP = "edu.cmu.minorthird.dataDir";	/** Property defining location of labels added to data */	public static final String LABELDIR_PROP = "edu.cmu.minorthird.labelDir";	/** Property defining location of scripts for loading data */	public static final String SCRIPTDIR_PROP = "edu.cmu.minorthird.scriptDir";	private static Properties props = new Properties();	static {		try {			InputStream in = FancyLoader.class.getClassLoader().getResourceAsStream("data.properties");			if (in != null) {				props.load(in);				log.info("loaded properties from stream "+in);			} else {				log.warn("can't find data.properties");			}		} catch (IOException e) {			throw new IllegalStateException("error getting data.properties: "+e);		}		// override data.properties with command line		String[] ps = new String[] { REPOSITORY_PROP, DATADIR_PROP, LABELDIR_PROP, SCRIPTDIR_PROP}; 		for (int i=0; i<ps.length; i++) {			if (System.getProperty(ps[i])!=null) props.setProperty(ps[i], System.getProperty(ps[i]));		}		// fill in defaults values for DATADIR_PROP,LABELDIR_PROP,SCRIPTDIR_PROP relative to REPOSITORY_PROP		if (props.getProperty(DATADIR_PROP)==null) {			props.setProperty(DATADIR_PROP,props.getProperty(REPOSITORY_PROP)+"/data");		}		if (props.getProperty(LABELDIR_PROP)==null) {			props.setProperty(LABELDIR_PROP,props.getProperty(REPOSITORY_PROP)+"/labels");		}		if (props.getProperty(SCRIPTDIR_PROP)==null) {			props.setProperty(SCRIPTDIR_PROP,props.getProperty(REPOSITORY_PROP)+"/loaders");		}	};  /** use the bsh script to load a textbase */	public static TextBase loadTextBase(String script) {		Object o = loadObject(script);		if (o instanceof TextBase) return (TextBase)o;		else if (o instanceof TextLabels) return ((TextLabels)o).getTextBase();		else throw new IllegalStateException("script "+script+" doesn't load a text base");	}	/** Return an array of a possible arguments to FancyLoader.loadTextLabels()	 */	public static Object[] getPossibleTextLabelKeys()	{		List result = new ArrayList();		for (int i=1; i<=3; i++) {			result.add( "sample"+i+".train");			result.add( "sample"+i+".test" );		}    File dir = new File(props.getProperty(SCRIPTDIR_PROP));		if (dir!=null) {			String[] files = dir.list();			for (int i=0; files!=null && i<files.length; i++) {				result.add( files[i]); 			}		}				return result.toArray();	}  /**	 * Try to load a  TextLabels object in one of these ways.	 * <ol>	 * <li>if script is "sampleI.train" or "sampleI.test", generate them	 * using code.	 * <li>if the script is the name of a file in SCRIPTDIR_PROP,	 * treat that file as a bean shell script, and return the result of	 * executing it.	 * <li>if script is a file stem "foo" and a file "foo.base" exists, load	 * a textBase from "foo.base" (one document per line). Then look for	 * labels in "foo.labels". If "foo.labels" does not exist, then assume that	 * labels are given as SGML tags in the data loaded.	 * <li>if script is a file stem "foo" and a directory "foo" exists, load	 * a textBase from "foo" (one document per file), and look for labels	 * in "foo.labels".  If "foo.labels" does not exist, then assume that	 * labels are given as SGML tags in the data loaded.	 * </oi>   *   * @param script   * @return TextLabels object with the annotations   */	public static TextLabels loadTextLabels(String script)	{		if ("sample1.train".equals(script)) return SampleExtractionProblem.trainLabels();		else if ("sample1.test".equals(script)) return SampleExtractionProblem.testLabels();		if ("sample2.train".equals(script)) return SampleExtractionProblem.taggerTrainLabels();		else if ("sample2.test".equals(script)) return SampleExtractionProblem.taggerTestLabels();		if ("sample3.train".equals(script)) return SampleClassificationProblem.trainLabels();		else if ("sample3.test".equals(script)) return SampleClassificationProblem.testLabels();    //is this a script, ie: the file is real		String scriptDir = getProperty(SCRIPTDIR_PROP);    File f = new File(new File(scriptDir), script);    if (f.exists() && !f.isDirectory()) {			Object o = loadObject(script);			if (o==null)				throw new IllegalArgumentException("script "+script+" from dir "+scriptDir+" returns null");			if (!(o instanceof TextLabels))				throw new IllegalArgumentException("script "+script+" from dir "+scriptDir+" doesn't return a TextLabels");			return (TextLabels)o;		}    //look for other files - s1t does it have labels?    File lablesFile = new File(script + ".labels");    File dataFile = new File(script + ".base");    File dataDir = new File(script);    if (dataFile.exists())      return SimpleTextLoader.load(dataFile, lablesFile.exists());    if (dataDir.exists())      return SimpleTextLoader.load(dataDir, lablesFile.exists());
	else {					
		try {
			TextBaseLoader baseLoader = new TextBaseLoader();
			TextBase base = new BasicTextBase();
			baseLoader.loadTaggedFiles(base, new File(scriptDir, script));
			return baseLoader.getLabels();		} catch (Exception e) {			log.error("no data found! script=" + script);
			System.out.println("Exception");			System.out.println("Exception: " + e.getMessage());			}		return null;
	}	    	}	public static AnnotatorLearner loadAnnotatorLearner(String script) {		return (AnnotatorLearner)loadObject(script);	}	public static Object loadObject(String script)	{		String dataDir = getProperty(DATADIR_PROP);		String labelDir = getProperty(LABELDIR_PROP);		String scriptDir = getProperty(SCRIPTDIR_PROP);		log.info("dataDir: "+dataDir+" labelDir: "+labelDir+" scriptDir: "+scriptDir);		try {			bsh.Interpreter interpreter = new bsh.Interpreter();			interpreter.eval("File dataDir = new File(\""+dataDir+"\");");			interpreter.eval("File labelDir = new File(\""+labelDir+"\");");			File f =  new File(new File(scriptDir),script);			if (!f.exists()) throw new IllegalArgumentException("can't find file "+f.getAbsolutePath());			log.info("loading object defined by "+f.getAbsolutePath());			return interpreter.source(f.getAbsolutePath());			} catch (Exception e) {				log.error(e, e);				return null;			}		}	public static String getProperty(String prop) {		String v = System.getProperty(prop);		return v!=null ? v : props.getProperty(prop);	}	static public void main(String[] args) {		Object o = FancyLoader.loadObject(args[0]);		System.out.println("loaded "+o);		if (o instanceof TextLabels) {			TextBaseViewer.view((TextLabels) o );		}	}}