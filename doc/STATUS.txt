PRIORITIES:
 - serializable CRFs, SVMs
 - tune/fix GenericCollinsLearner, ConditionalSemiMarkovModel
 - try randomizing order of examples on each pass in VotedPerceptron?
 - stderr on error rates?

UI tweaks:

  show javadocs in TypeSelector?
  LabelViewer => ViewLabels?

  add TrainTagger, TestTagger?
  progress counter & threads for dataset loading?   
  test shadowType?
  capture output dynamically?
  generic loader class, loadable interface, for "Save As..." in gui?

LARGER PROJECTS:

 - bootstrapping 
 - pruning & shrinkage for maxent & CRFs

MEDIUM TASKS:

 - POS tagger
 - engineering line-based analysis: 
 TextBase b = textBase.retokenize(tokenizer,textBase); // retokenize a text base, eg by lines, or tree-bank
 boolean textBase.compatibleWith(otherBase);  // check if otherBase is a variant tokenization
 LabelImporter imp = monotonicTextLabels.getImporter(); // build something that imports new stuff into textLabels
 labelImporter.importSpanType(type,otherLabels);  // import a span type from text labels with a compatible textBase

BUGS:
   - should precision/recall start at something other than 1.0 (max precision?)
   - graph doesn't come out if there is no range?
   - spanClosures are not stored properly (only by document); should really store tokenProps also,
   and CWA isn't even tracked for span properties
   - span diff fails for nested spans, eg "a b c <x>d e<x>f g</x> h i j</x>k"
   - performance issues loading in large files (with markup?)

CLEANUPS/DESIGN:

  src/edu/cmu/minorthird/classify/algorithms/linear/LogisticRegressor.java -removed, use MaxEntLearne
  src/edu/cmu/minorthird/ui/ExperimentWizard.java -removed, use ui


 - fix FeatureFactory mess
 step 1 - eliminate Feature.Factory
    src/edu/cmu/minorthird/classify/DatasetLoader.java -done
    src/edu/cmu/minorthird/classify/SampleDatasets.java -done
    src/edu/cmu/minorthird/classify/StackedLearner.java -done
    src/edu/cmu/minorthird/classify/sequential/CRFLearner.java
    src/edu/cmu/minorthird/classify/sequential/InstanceFromSequence.java -done
    src/edu/cmu/minorthird/text/learn/ConditionalSemiMarkovModel.java -done
    src/edu/cmu/minorthird/text/learn/SpanFE.java -done
 step 2 - remove example.compress, use factory.compress in datasets -done
 step 3 - use FeatureFactory's in SpanFE's 
 step 4 - intern string names as well in FeatureFactory

 - clean up util.Loader?

 - work out better way to handle histories in training: they should not have to be specified twice
 - linkage issues
 - remove BinaryExample?
   [new scheme: data is the same for binary/kWay - binary data is just a special case.
    but since classifiers/classifier learners that are binary only are easier to implement,
    we allow a subclass for these.]

     src/edu/cmu/minorthird/classify/algorithms/trees/AdaBoost.java -done
     src/edu/cmu/minorthird/classify/algorithms/trees/DecisionTreeLearner.java -done
     src/edu/cmu/minorthird/classify/BinaryExample.java -done
     src/edu/cmu/minorthird/classify/DatasetLoader.java -done
     src/edu/cmu/minorthird/classify/FeatureFactory.java -done
     src/edu/cmu/minorthird/classify/OneVsAllLearner.java -done
     src/edu/cmu/minorthird/classify/SampleDatasets.java -done
     src/edu/cmu/minorthird/classify/sequential/GenericCollinsLearner.java -done
     src/edu/cmu/minorthird/classify/sequential/SequenceDataset.java -done
     src/edu/cmu/minorthird/classify/transform/AbstractInstanceTransform.java -done
     src/edu/cmu/minorthird/classify/transform/InfoGainInstanceTransform.java -done
     src/edu/cmu/minorthird/classify/transform/OrderBasedInstanceTransform.java  -done
     src/edu/cmu/minorthird/classify/transform/T1InstanceTransform.java  -done
     src/edu/cmu/minorthird/text/learn/BatchFilteredFinderLearner.java -done
     src/edu/cmu/minorthird/text/learn/BatchInsideOutsideLearner.java -deleted
     src/edu/cmu/minorthird/text/learn/BatchStartEndLengthLearner.java -deleted
     src/edu/cmu/minorthird/text/learn/ConditionalSemiMarkovModel.java -deleted
     src/edu/cmu/minorthird/text/learn/experiments/ClassifyExperiment.java -deleted
     src/edu/cmu/minorthird/text/learn/SampleFE.java -deleted?
     src/edu/cmu/minorthird/text/MovieDataset.java -deleted
     src/edu/cmu/minorthird/ui/CommandLineUtil.java -done


 - remove apps/ksteppe, broken demos, BatchInsideOutsideLearner,BatchFilteredFinderLearner,BinaryExample,
 InfoGainInstanceTransform, Wizard,
 - fix mixup parser to be consistent, fix Dependency/Mixup mess, Dependency to text, remove 'requirements' in Annotator
 - add to mixup 'begin' ... 'end exporting a as b,c as d,...;'
 - transform.MaskedInstance could be more efficient
 - classify.algorithm.random, classify.algorithm.active are misplaced
 - explanations are messy in text - structure them?
 - edo code: Spiltter, punk => grep, get rid of stopwords in file?
 - CompactInstance - where to use it? maybe in loaders and feature extractors?
   current scheme runs out of memory with multiple repeated learning experiments in
   same JVM?
 - Conventions to get names consistently used.
 - SpanFE cleanup: no defaults, features for whole span, no feature buffer 
 - Text GUI rewrite: labeler, viewer

 To evaluate:
 - replace 'eq.foo' with 'has.foo and 'countOf.foo=K'?
 - should Hyperplane extend MutableInstance ?
 - separate out feature extractor loading from classifier loading somehow? 

Spring cleaning:
    TODO:
    - move MovieDataset to apps
    - move classify.algorithms.random to ... ?
    - move hard-coded annotators (POSTagger, StopWords, SigFileAnnotator, ...) to text.annotators ? 
    - BatchFilteredFinderLearner: do I need 'finders'?
    - clean up mixup parsing, text loading
    - will remove text.learn.experiments.SequenceAnnotatorExpt
    DONE:
    - moved mixup.Dependencies to text
    - cleaned up SequenceAnnotatorLearner, historySize; made historySize be computed from SequenceClassifierLearner
    - removed CMMAnnotatorLearner (just short call to SequenceAnnotatorLearner)
    removed LogisticRegressor.java.deleteMe (use MaxEntLearner instead)
    ui.LabelViewer moved to "ViewLabels"
    text/BOWClassifierWrapper.java.deleteMe - removed use classifierAnnotator instead
    removed prerequistings from text.AbstractAnnotator, it's now in Dependencies

RECENT CHANGES:
 - set default #epochs to 1, not 4
 - added completeTraining() call in classifiers
 - modified GenericCollinsLearner to be more like CollinsPerceptronLearner
 - fix evaluation for spanProp - added micro-averaged precision/recall
 - fixed -test for TrainTestExtractor
 - ZoomedTextLabelsViewer
 - set span properties with TextLabelsLoader
 - specify span prop with TextLabelsExperiment
 - subsetting crossvalsplitter
 - add SequenceAnnotatorLearner option to show dataset
 -config FILE for CommandLineProcessor
 - added some stats to give more informative errors when dataset is not binary
 - added spanDiffing to TextLabelViewer.ViewerControls
 - added multi-class text categorization, refactored text cat fe's to	
 be able to load mixup files
 - touched up FilteredFinderLearner, added training to distances in ConditionalSemiMarkovModel.dictFE, added
 options to TextLabelsExperiment
 - warning issues on on empty directory files too
 - more visualization stuff in text.learn
 - set up ConditionalSemiMarkovModel.CSMMFE to extend SampleFE.ExtractionFE
 - refactored SampleFE.ExtractionFE to extend SpanFE
 - exposed getSpanFeatureExtractor() in AnnotatorLearner
 - added/documented some more parameters for TextLabelsExperiment
 - added more visualization for CSMM
 - added (some minimal) visualization for CSMM
 - bug fix in VotedPerceptron
 - TFIDF transform -done
 - added textEnv.require("annotationType") - which would throw an error for immutable text environment
 - changed BeamSearch semantics: if there are two history-equivalent entries with different scores, 
 the one with a lower score is dropped
 - dictionary loading is inefficient - changed MixupInterpreter to store dictionaries and tries.
 - MixupProgram now takes streams, and uses library-loading to load relative to classpath
 - added (failing) SVM extraction test
 - space issues for saved Evaluations fixes
 - removed duplication of learning in 'StackedLearner'
 - sliders for SpanViewer.TextViewer
 - add progress counters to tester
 - classifiedSequenceDataset
 - fixed bug in txt.gui.SpanLabeler
 - added charIndexProperSubSpan(lo,hi)
 - added save in GUI frames
 - added WizardUI
 - optimized ParallelViewer
 - changed recieveContent to setContent
 - finished extraction test
 - fixed einat's bug, more work on cls.seq
 - added jwf.jar, jwf-docs to docs, src TypeSelector.java
 - CrossValidatedDataset (builds on classified dataset)
 - FixedTestSetSplitter, for a single train/test partition
 - Preparing to cleanup & unify evaluation code for extraction:
   - remove cls.expt.DatasetSplitter -done, need to cvs
   - move Splitter interface into cls -done, need to cvs
   - added cls.generic interfaces, attached interfaces to node - done, need to cvs cls.generic
  - code to do span-level precision/recall added to SpanDifference, textbaseViewer      
  - must batch load Container (changed TextBase API); significant performance enhancement
  - added Container class representing top level container or document
  - made classifier tests a bit more forgiving
  - added SmartVanillaViewer, integrated with Dataset so that classifications can be seen
  - visible decision trees & boosted classifiers
  - extend evaluation to non-binary learning tasks
  - add ExampleSchema inference to dataset creation, pass schemas in to learners
  - added a ControlableViewer, which can interrogate a toolbar and
  - added a ControlPanel Toolbar specialization, which exports
  - added a ControlledViewer, which couples as a ControlableViewer and a ControlPanel.
  - cleaned up Binary/KWay example mess
  - cls.expt.ClassifiedDataset added
  - added more output to evaluation code, started ClassifiedDataset.java, fixed maxF1 bug
  - StackedLearner, extended form of calibrated learner
  - added reset to classifiers to fix cross-validation bug
  - added serialization utilities
  - made classifiers serializable
  - added subpopulation control in textbaseloader
  - add language model package in .txt
  - added properties to Evaluations
  - some bug fixes and extra monitoring for running extraction-learning experiments
  - fixed precision/recall curves for Evaluation
  - refactored SplitViewer out of ZoomedViewer
  - added txt.gui.SpanViewer, txt.gui.SpanLooperViewer, txt.gui.MarkupPlan
  - added MessageViewer, started new txt.gui.SpanViewer
  - probably bug fixed in decision tree learner
  - added knn, as simple example of a multi-class learner
  - added conditional markov models							 
  - added active learning
  - dataset is an interface
  - added escaping for dataset chars
  - added file loading scheme for tries
  - added some new viewer code, fixed a list selection bug by using awt events
  - added PoissonLearner, PoissonClassifier, and modified SampleDatasets to add test data for Numeric Features
  - problem with pr graphs fixed - JFreeGraph doesn't like duplicated x values
  - modified importOps so that '-1' is means maximal length
  - moved setAnnotatedBy from textenv to MutableTextEnv
  - added provide, require to mixup
  - added dictionary loading
  - refactored guis, see com.wcohen.util.gui  
  - more documentation & guidelines
  - example of classifier learning - webmaster commands?
  - LogisticRegressor should be a BatchBinaryClassifierLearner
  - add special UnivariateLogisticRegressor subclass with an instance that just holds "x"
  - BatchVersion(OnlineBinaryClassifierLearner learner) - creates dataset & trains
  - keep word counts in SpanFE
  - added calibrated binary classifier, online learner, logistic regression
  - new scoring for classifiers: classLabel() holds all information for scores, as well 
    as isPositive, isNegative, isCorrect()
  - bug fix: mixup debugger - can't add spans until after an "import"
  - decision trees - numeric features
  - refactored the Examples/BinaryExamples/KWayExamples to move
  more functionality into the Example level
  - clean up annotator learner - should have access to labels, which is used in
   training (for FE) and assumed to exist at test time.
  - set up test cases for classifiers and TestPackage
  - splitters are type-safe
  - boosting/decision trees 
  -- ant tests to confirm independence of cls, txt-ann, bb
  -- cls.Instance includes a 'getSubpopulationId' which is an string naming the "subpopulation"
    (strata); use Pradeep's CrossValHandler to handle cross-validation of subpopulation's.
  -- cls.expt.RandomSplitter and new CrossValSplitter respect subpopulation's
  -- cls.expt.SimpleRandomSplitter doesn't respect subpopulation's
  -- re-organized learning code in cls:
   --- Classifier is almost a marker interface, with BinaryClassifier and KWayClassifier being the
       'real' interfaces of interest.  There are similar splits for Example and ClassifierLearner.
   ---- Hyperplanes, VotedPerceptron, NaiveBayes are now in cls.linear
  -- allow optional spanTypes, eg @foo? for optional occurance of foo
  -- implement "defSpanType foo =bar- EXPR
  - Classifier{Learner} is abstract, with KWay and Binary as subclasses
  - generic text progress counter
  - start-end-length annotator
  - allow regex's as an alternative deftype, eg defSpanType foo =bar~ re 'in ([a-z]+)',1
   - simple learning expt for txt.ann & cls
   -- cls.expt includes a generic Splitter object which splits any iterator into folds, train/test splits, 
   etc; 
